#!/usr/bin/env bash

#
# Setup.
#

temporary_git_repository="/tmp/org.small-tech.comet-screenshots"

# Make sure we have a current build of Comet and that the transations
# are installed.
# task/install

# Ensure consistent screenshot size by controlling text scaling factor.
gsettings set org.gnome.desktop.interface text-scaling-factor 1

# Back up the existing wallpaper and set the chroma key (green screen)
# background that we need to take the screenshots of the spelling feature
# context menu.
# TODO

# Ensure local dictionaries for all supported locales are installed.
# TODO

# Initialise a new Git working copy.
rm -rf "${temporary_git_repository}"
mkdir "${temporary_git_repository}"
pushd "${temporary_git_repository}"
git init
echo 'small-web.org' > what-is-the-small-web
git add --all
popd

#
# Initialise Comet app settings
#

# ~ Center window on 1920x1080 first screen.
gsettings set org.small_tech.comet.saved-state window-position "(206,79)"
gsettings set org.small_tech.comet.saved-state window-size "(540,378)"

# Map of languges to keyboard maps (used by setxkbmap to set the keyboard map
# before xdotool types in a localised string).
declare -A languages_to_keyboard_layouts=( ["en"]="us" ["tr"]="tr(alt)" ["nl"]="nl" )

# Save the current keyboard layout as we will be changing it in the script
# to get xdotool to type in the localised strings properly.
initial_keyboard_map="$(setxkbmap -print | grep xkb_symbols | awk -F"+" '{print $2}')"

# Get original English string constants from app source.
demonstration_of_line_limit=$(cat src/Constants/AppCenterCopy.vala | sed -rn 's/\s*?public const string DEMONSTRATION_OF_LINE_LIMIT = _\("(.*?)"\);/\1/p')
definition_of_dogma=$(cat src/Constants/AppCenterCopy.vala | sed -rn 's/\s*?public const string DEFINITION_OF_DOGMA = _\("(.*?)"\);/\1/p')
emoji_picker_instructions=$(cat src/Constants/AppCenterCopy.vala | sed -rn 's/\s*?public const string EMOJI_PICKER_INSTRUCTIONS = _\("(.*?)"\);/\1/p')

echo "${demonstration_of_line_limit}"
echo "${definition_of_dogma}"
echo "${emoji_picker_instructions}"

# Get list of localisation languages from app data.
languages=("en")

for language_file_name in $(ls po); do
    # Note: the extension test is necessary in addition to the mime-type test
    # as .pot files are reported with the same mime-type as .po files and we
    # only want to process the latter.
    test "${language_file_name: -3}" = ".po" && test "$(file --mime-type -b po/${language_file_name})" = "text/x-po" && {
    languages+=("${language_file_name::2}")
    }
done;

echo "${languages[*]}"

#
# Take localised screenshots.
#

echo -e 'Taking screenshots, please do not touch the system until complete…\n'

for language in ${languages[*]}; do
    echo -e "\n[[[" "${language}" "]]]\n"

    # Ensure the directory for the language exists and is empty.
    language_directory="comet-screenshots/${language}"
    rm -rf "${language_directory}"
    mkdir -p "${language_directory}"

    # Note that while there are newlines (\n) in this string, we do not use gettext’s -e option to expand
    # them as we will be re-writing them as carriage returns (\r) so that they display properly
    # when written into the Comet windows using xdotool’s type command.
    localised_demonstration_of_line_limit="$(LANGUAGE=$language gettext -e org.small_tech.comet "${demonstration_of_line_limit}" | tr '\n' '~' | sed 's/~/\\r/g' | sed 's/\\r$//')"
    # localised_demonstration_of_line_limit="${localised_demonstration_of_line_limit}" | tr '\n' '~' | sed 's/~/\\r/g' | sed 's/\\r$//'

    echo "${localised_demonstration_of_line_limit}"

    localised_definition_of_dogma=$(LANGUAGE=$language gettext org.small_tech.comet "${definition_of_dogma}")

    localised_emoji_picker_instructions=$(LANGUAGE=$language gettext org.small_tech.comet "${emoji_picker_instructions}")

    # In order for xdotool to type the characters correctly, the correcy keyboard map
    # for the language must also be set.
    keyboard_map="${languages_to_keyboard_layouts[$language]}"
    setxkbmap "${keyboard_map}"


    # # echo -e "1:" "${localised_demonstration_of_line_limit}\n"
    # # echo -e "2:" "${localised_definition_of_dogma}\n"
    # # echo -e "3:" "${localised_emoji_picker_instructions}\n"

    ################################################################################
    #
    # Screenshot 1: Basic Usage (light and dark style montage)
    #
    # Take screenshots of basic usage demonstrating the line limit warning
    # in both light and dark modes and create a montage of the two.
    #
    ################################################################################

    echo -e "  - Basic usage (light and dark)\n"

    # Set the character limit to 72.
    gsettings set org.small_tech.comet.saved-state first-line-character-limit 72

    # Set light mode
    io.elementary.switchboard &
    sleep 1
    xdotool search --onlyvisible --class switchboard windowactivate && xdotool type --delay=0 "dark" && xdotool key Down && sleep 1 && xdotool key Return && sleep 1 && xdotool key Left && xdotool key Left && sleep 1 && xdotool key Ctrl+q

    # Take light screenshot
    echo "  - Light"
    pushd "${temporary_git_repository}"
    LANGUAGE="${languages_to_full_language_codes[$language]}" git commit &
    popd
    sleep 1
    xdotool search --onlyvisible --class comet windowactivate
    xdotoolified_string="$(printf "${localised_demonstration_of_line_limit}")"

    # In order for xdotool to type the characters correctly, the correcy keyboard map
    # for the language must also be set.
    keyboard_map="${languages_to_keyboard_layouts[$language]}"
    setxkbmap "${keyboard_map}"

    xdotool type --delay=0 "${xdotoolified_string}"
    sleep 1
    gnome-screenshot --window --include-border --file "${language_directory}/comet-basic-light.png"
    sleep 1
    xdotool key Ctrl+q
    sleep 1

    # Set dark mode
    io.elementary.switchboard &
    sleep 1
    xdotool search --onlyvisible --class switchboard windowactivate && xdotool type --delay=0 "dark" && xdotool key Down && sleep 1 && xdotool key Return && sleep 3 && xdotool key Left && xdotool key Up && xdotool key Right && sleep 1 && xdotool key Ctrl+q

    # Take dark screenshot
    # TODO: Refactor to remove redundancy.
    echo "  - Dark"

    pushd "${temporary_git_repository}"
    LANGUAGE="${languages_to_full_language_codes[$language]}" git commit &
    popd
    sleep 1
    xdotool search --onlyvisible --class comet windowactivate
    xdotoolified_string="$(printf "${localised_demonstration_of_line_limit}")"


    xdotool type --delay=0 "${xdotoolified_string}"
    sleep 1
    gnome-screenshot --window --include-border --file "${language_directory}/comet-basic-dark.png"
    sleep 1
    xdotool key Ctrl+q
    sleep 1

    # Create montage of light and dark mode using a slanted split-screen effect
    # based on the golden mean and maintaining the original soft drop shadow.
    magick \
    \( "${language_directory}/comet-basic-light.png" +write mpr:comet-basic-light \) \
    \( "${language_directory}/comet-basic-dark.png" mpr:comet-basic-light \( -size 1278x952 xc:white -draw "stroke None fill Black path 'M %[fx:w/1.618],0 L %[fx:w-w/1.618],%[fx:h] L %[fx:w],%[fx:h] L %[fx:w],0 Z'" \) -alpha Off -composite +write mpr:montage \) \
    \( mpr:montage \( mpr:comet-basic-light -alpha extract \) -compose CopyOpacity -composite +write "${language_directory}/comet-basic-usage.png" \) \
    null:

    ################################################################################
    #
    # Screenshot 2: Settings Menu
    #
    ################################################################################

    echo "  - Settings screenshot"

    # Set the character limit to 50.
    gsettings set org.small_tech.comet.saved-state first-line-character-limit 50

    pushd "${temporary_git_repository}"
    LANGUAGE="${languages_to_full_language_codes[$language]}" git commit &
    popd
    sleep 1
    xdotool search --onlyvisible --class comet windowactivate
    xdotoolified_string="$(printf "${localised_definition_of_dogma}")"
    xdotool type --delay=0 "${xdotoolified_string}"
    xdotool key Ctrl+comma
    sleep 1
    xdotool key Tab
    sleep 1
    gnome-screenshot --window --include-border --file "${language_directory}/comet-settings.png"
    sleep 1
    xdotool key Ctrl+q

    ################################################################################
    #
    # Screenshot 3: Emoji support
    #
    ################################################################################

    echo '  - Emoji support'

    # Set the character limit to 72.
    gsettings set org.small_tech.comet.saved-state first-line-character-limit 72

    pushd "${temporary_git_repository}"
    LANGUAGE="${languages_to_full_language_codes[$language]}" git commit &
    popd
    sleep 1
    xdotool search --onlyvisible --class comet windowactivate
    xdotoolified_string="$(printf "${localised_emoji_picker_instructions}")"
    xdotool type --delay=0 "${xdotoolified_string}"

    # Display the emoji picker towards the middle of the window.
    xdotool key Home
    for ((i = 0; i < "${emoji_picker_location_for_language[$language]}"; i++)); do
    xdotool key Ctrl+Right
    done
    xdotool key Ctrl+period
    sleep 1

    gnome-screenshot --window --include-border --file "${language_directory}/comet-emoji.png"
    sleep 1
    xdotool key Ctrl+q

    ################################################################################
    #
    # Screenshot 4: Spell check
    #
    ################################################################################

    echo '  - Spell check'

    # TODO

    ################################################################################
    #
    # Screenshot 5: Welcome screen
    #
    ################################################################################

    echo '  - Welcome screen'

    # Welcome screen (displays when Comet is launched without any arguments)
    echo -e "  - Welcome screen\n"
    build/org.small_tech.comet &
    xdotool search --onlyvisible --class comet windowactivate
    gnome-screenshot --window --include-border --file "${language_directory}/comet-welcome.png"
    xdotool key Ctrl+q

done;

# Restore the initial keyboard map.
setxkbmap "${initial_keyboard_map}"

echo -e '\nDone!\n\nYou can find the screenshots in ~/Pictures/Screenshots'
